version: '3.8'

services:
  # Namenode - Hadoop Master
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
      - ./data:/data
      - ./scripts:/scripts
    environment:
      - CLUSTER_NAME=bigdata-cluster
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - CORE_CONF_hadoop_http_staticuser_user=root
      - CORE_CONF_hadoop_proxyuser_hue_hosts=*
      - CORE_CONF_hadoop_proxyuser_hue_groups=*
      - HDFS_CONF_dfs_webhdfs_enabled=true
      - HDFS_CONF_dfs_permissions_enabled=false
      - HDFS_CONF_dfs_nameservices=cluster1
    env_file:
      - ./hadoop.env
    networks:
      - bigdata-network

  # Datanode 1
  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    restart: always
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
    ports:
      - "9864:9864"
    env_file:
      - ./hadoop.env
    depends_on:
      - namenode
    networks:
      - bigdata-network

  # Datanode 2  
  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    restart: always
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
    ports:
      - "9865:9864"
    env_file:
      - ./hadoop.env
    depends_on:
      - namenode
    networks:
      - bigdata-network

  # Resource Manager - YARN
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode1:9864 datanode2:9864"
    env_file:
      - ./hadoop.env
    ports:
      - "8088:8088"
    depends_on:
      - namenode
      - datanode1
      - datanode2
    networks:
      - bigdata-network

  # Node Manager
  nodemanager:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode1:9864 datanode2:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
    ports:
      - "8042:8042"
    depends_on:
      - resourcemanager
    networks:
      - bigdata-network

  # History Server
  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode1:9864 datanode2:9864 resourcemanager:8088"
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env
    ports:
      - "8188:8188"
    depends_on:
      - resourcemanager
    networks:
      - bigdata-network

  # Spark Master
  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    volumes:
      - ./scripts:/scripts
      - ./data:/data
    depends_on:
      - namenode
    networks:
      - bigdata-network

  # Spark Worker 1
  spark-worker-1:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    volumes:
      - ./scripts:/scripts
      - ./data:/data
    networks:
      - bigdata-network

  # Spark Worker 2
  spark-worker-2:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    volumes:
      - ./scripts:/scripts
      - ./data:/data
    networks:
      - bigdata-network

  # Hive Metastore Database
  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
    container_name: hive-metastore-postgresql
    volumes:
      - hive_postgresql:/var/lib/postgresql/data
    networks:
      - bigdata-network

  # Hive Metastore
  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    env_file:
      - ./hadoop.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:9870 datanode1:9864 datanode2:9864 hive-metastore-postgresql:5432"
    ports:
      - "9083:9083"
    depends_on:
      - hive-metastore-postgresql
    networks:
      - bigdata-network

  # Hive Server
  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-server
    env_file:
      - ./hadoop.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore-postgresql/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    ports:
      - "10000:10000"
    depends_on:
      - hive-metastore
    volumes:
      - ./scripts:/scripts
      - ./data:/data
    networks:
      - bigdata-network
  # Apache Superset
  superset:
    image: apache/superset:latest
    container_name: superset
    ports:
      - "8089:8088"
    environment:
      - SUPERSET_CONFIG_PATH=/app/superset_config.py
    volumes:
      - ./config/superset_config.py:/app/superset_config.py
      - superset_data:/app/superset_home
    command: >
      bash -c "
        superset fab create-admin --username admin --firstname Admin --lastname Admin --email admin@example.com --password admin &&
        superset db upgrade &&
        superset init &&
        superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger
      "
    depends_on:
      - hive-server
    networks:
      - bigdata-network

  # Apache Airflow (Scheduler + Webserver)
  airflow:
    image: apache/airflow:2.7.0
    container_name: airflow
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
    ports:
      - "8090:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
    depends_on:
      - airflow-db
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname Admin --role Admin --email admin@example.com --password admin &&
        airflow scheduler &
        airflow webserver
      "
    networks:
      - bigdata-network
  # Airflow Database
  airflow-db:
    image: postgres:13
    container_name: airflow-db
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - airflow_postgresql:/var/lib/postgresql/data
    networks:
      - bigdata-network

  # PostgreSQL Database for General Use (Exposed to Local)
  postgres:
    image: postgres:15
    container_name: postgres-local
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_DB=poverty_mapping
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data:/docker-entrypoint-initdb.d/data
    command: >
      postgres -c 'max_connections=100'
      -c 'shared_buffers=128MB'
      -c 'effective_cache_size=256MB'
      -c 'work_mem=4MB'
      -c 'maintenance_work_mem=64MB'
    networks:
      - bigdata-network

  # Jupyter Notebook for Development & Analysis
  jupyter:
    image: jupyter/pyspark-notebook:latest
    container_name: jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - GRANT_SUDO=yes
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./scripts:/home/jovyan/scripts
      - ./data:/home/jovyan/data
    user: root
    command: start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''
    networks:
      - bigdata-network

volumes:
  hadoop_namenode:
  hadoop_datanode1:
  hadoop_datanode2:
  hadoop_historyserver:
  hive_postgresql:
  superset_data:
  airflow_postgresql:
  postgres_data:

networks:
  bigdata-network:
    driver: bridge
